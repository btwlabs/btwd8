<?php

/**
 * @file
 * Provides module functionality.
 */

use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\commerce_avatax\Avatax;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function commerce_avatax_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'commerce_store') {
    $fields['avatax_company_code'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Avatax company code'))
      ->setDescription(t('The company code to send to Avatax when calculating taxes.'))
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 0,
      ]);
  }
  if ($entity_type->id() === 'commerce_product_variation') {
    $fields['avatax_tax_code'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Avatax tax code'))
      ->setDescription(t('Tax code for the product'))
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 0,
      ]);
  }

  if ($entity_type->id() === 'user') {
    $fields['avatax_customer_code'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Avatax customer code'))
      ->setDisplayConfigurable('form', TRUE)
      ->setSetting('max_length', 50)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 0,
      ]);

    $fields['avatax_tax_exemption_number'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Tax Exemption number'))
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 0,
      ]);

    $fields['avatax_tax_exemption_type'] = BaseFieldDefinition::create('list_string')
      ->setLabel(t('Tax Exemption type'))
      ->setSetting('allowed_values_function', ['\Drupal\commerce_avatax\Avatax', 'getExemptionTypes'])
      ->setDisplayOptions('form', [
        'type' => 'options_select',
        'weight' => 4,
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_entity_field_access().
 */
function commerce_avatax_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  if (in_array($field_definition->getName(), ['avatax_customer_code', 'avatax_tax_exemption_type', 'avatax_tax_exemption_number'], TRUE) && $operation == 'edit') {
    return AccessResult::forbiddenIf(!$account->hasPermission('configure avatax exemptions'));
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function commerce_avatax_commerce_order_delete(OrderInterface $order) {
  // Void the Avatax transaction on order deletion.
  if (Avatax::hasAvataxAdjustments($order)) {
    $avatax_lib = \Drupal::service('commerce_avatax.avatax_lib');
    $avatax_lib->transactionsVoid($order);
  }
}
