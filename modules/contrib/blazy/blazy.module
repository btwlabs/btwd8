<?php

/**
 * @file
 * Provides basic Blazy integration for lazy loading and multi-serving images.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\NestedArray;
use Drupal\blazy\Blazy;
use Drupal\blazy\BlazyDefault;
use Drupal\blazy\BlazyViews;
use Drupal\blazy\Utility\BlazyMarkdown;

/**
 * Provides a convenient shortcut for procedural hooks.
 *
 * @return class
 *   The Blazy manager class instance.
 */
function blazy() {
  static $manager;

  if (!isset($manager)) {
    $manager = \Drupal::service('blazy.manager');
  }

  return $manager;
}

/**
 * Implements hook_theme().
 */
function blazy_theme() {
  return ['blazy' => ['render element' => 'element']];
}

/**
 * Prepares variables for blazy.html.twig templates.
 */
function template_preprocess_blazy(&$variables) {
  Blazy::buildAttributes($variables);
}

/**
 * Overrides variables for responsive-image.html.twig templates.
 */
function blazy_preprocess_responsive_image(&$variables) {
  // Only proceed if a Blazy formatter, regardless its value.
  if (isset($variables['attributes']['data-responsive-blazy'])) {
    Blazy::preprocessResponsiveImage($variables);
  }
}

/**
 * Implements hook_preprocess_field().
 */
function blazy_preprocess_field(array &$variables) {
  $element = $variables['element'];

  // Only proceed if an image field and using Blazy formatter.
  if (!isset($element['#blazy'])) {
    return;
  }

  // Defines [data-blazy] attribute as required by the Blazy loader.
  $settings = $element['#blazy'];
  $variables['attributes']['class'][] = 'blazy';
  $variables['attributes']['data-blazy'] = empty($settings['blazy_data']) ? '' : Json::encode($settings['blazy_data']);
  if (!empty($settings['media_switch'])) {
    $switch = str_replace('_', '-', $settings['media_switch']);
    $variables['attributes']['data-' . $switch . '-gallery'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function blazy_preprocess_views_view(array &$variables) {
  if (!empty($variables['css_class']) && strpos($variables['css_class'], 'blazy--') !== FALSE) {
    if ($lightboxes = blazy()->getLightboxes()) {
      BlazyViews::preprocessViewsView($variables, $lightboxes);
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function blazy_views_pre_render($view) {
  if (isset($view)) {
    BlazyViews::viewsPreRender($view);
  }
}

/**
 * Implements hook_config_schema_info_alter().
 */
function blazy_config_schema_info_alter(array &$definitions) {
  Blazy::configSchemaInfoAlter($definitions, 'blazy_base');
}

/**
 * Implements hook_library_info_alter().
 */
function blazy_library_info_alter(&$libraries, $extension) {
  if ($extension === 'blazy') {
    if (function_exists('libraries_get_path')) {
      $libraries['blazy']['js'] = ['/' . libraries_get_path('blazy') . '/blazy.min.js' => ['weight' => -4]];
    }

    if (blazy()->configLoad('io.enabled') && blazy()->configLoad('io.unblazy')) {
      $libraries['load']['dependencies'] = [
        'core/drupal',
        'blazy/bio.media',
        'blazy/loading',
      ];
    }
  }
}

/**
 * Implements hook_blazy_attach_alter().
 */
function blazy_blazy_attach_alter(array &$load, $attach = []) {
  if (!empty($attach['colorbox'])) {
    // Intentionally on the second line to not hit it till required.
    if (function_exists('colorbox_theme')) {
      $dummy = [];
      \Drupal::service('colorbox.attachment')->attach($dummy);
      $load = isset($dummy['#attached']) ? NestedArray::mergeDeep($load, $dummy['#attached']) : $load;
      $load['library'][] = 'blazy/colorbox';
      unset($dummy);
    }
  }
}

/**
 * Implements hook_blazy_lightboxes_alter().
 */
function blazy_blazy_lightboxes_alter(array &$lightboxes) {
  if (is_file(DRUPAL_ROOT . '/libraries/photobox/photobox/jquery.photobox.js')) {
    $lightboxes[] = 'photobox';
  }
}

/**
 * Implements hook_blazy_settings_alter().
 */
function blazy_blazy_settings_alter(array &$build, $items) {
  $settings = &$build['settings'];

  // Sniffs for Views to allow block__no_wrapper, views_no_wrapper, etc.
  if (function_exists('views_get_current_view') && $view = views_get_current_view()) {
    $settings['view_name'] = $view->storage->id();
    $settings['current_view_mode'] = $view->current_display;
  }
}

/**
 * Alters blazy settings here due to static FormatterBase::defaultSettings().
 */
function blazy_alterable_settings(array &$settings) {
  return BlazyDefault::getInstance()->alterableSettings($settings);
}

/**
 * Overrides template_preprocess_media_oembed_iframe().
 */
function blazy_preprocess_media_oembed_iframe(array &$variables) {
  \Drupal::service('blazy.oembed')->preprocessMediaOembedIframe($variables);
}

/**
 * Provides a shortcut to parse the markdown string for better hook_help().
 */
function blazy_parse_markdown($string) {
  return BlazyMarkdown::isApplicable() ? BlazyMarkdown::parse($string) : FALSE;
}

/**
 * Implements hook_field_formatter_info_alter().
 *
 * @deprecated to be removed for core Media pre/post Blazy 8.2.x full release.
 */
function blazy_field_formatter_info_alter(array &$info) {
  // Supports optional Media Entity via VEM/VEF if available.
  $common = [
    'description' => t('Displays lazyloaded images, or iframes, for VEF/ ME.'),
    'quickedit'   => ['editor' => 'disabled'],
    'provider'    => 'blazy',
  ];

  if (blazy()->getModuleHandler()->moduleExists('video_embed_media')) {
    $info['blazy_file'] = $common + [
      'id'          => 'blazy_file',
      'label'       => t('Blazy Image with VEF (deprecated)'),
      'class'       => 'Drupal\blazy\Plugin\Field\FieldFormatter\BlazyFileFormatter',
      'field_types' => ['entity_reference', 'image'],
    ];

    $info['blazy_video'] = $common + [
      'id'          => 'blazy_video',
      'label'       => t('Blazy Video (deprecated)'),
      'class'       => 'Drupal\blazy\Plugin\Field\FieldFormatter\BlazyVideoFormatter',
      'field_types' => ['video_embed_field'],
    ];
  }
}
