<?php

/**
 * @file
 * commerce_square module file.
 */

use Drupal\Component\Serialization\Json;
use GuzzleHttp\Exception\ClientException;
use SquareConnect\ApiException;

/**
 * Implements hook_cron().
 */
function commerce_square_cron() {
  $logger = \Drupal::logger('commerce_square');
  /** @var \Drupal\commerce_square\Connect $connect */
  $connect = \Drupal::service('commerce_square.connect');

  if (empty($connect->getAccessToken('production'))) {
    \Drupal::logger('commerce_square')->debug('No access token, skipping');
    return;
  }

  $access_token_expiry = $connect->getAccessTokenExpiration('production');
  if (!empty($access_token_expiry)) {
    $client = \Drupal::httpClient();
    // We can send this request only once to square.
    try {
      $response = $client->post('https://connect.squareup.com/oauth2/clients/' . $connect->getAppId('production') . '/access-token/renew', [
        'json' => [
          'access_token' => $connect->getAccessToken('production'),
        ],
        'headers' => [
          'Authorization' => 'Client ' . $connect->getAppSecret(),
          'Accept' => 'application/json',
        ],
      ]);
      $response_body = Json::decode($response->getBody());
      $logger->debug(Json::encode($response_body));
      if (!empty($response_body['access_token'])) {
        $state = \Drupal::state();
        $state->set('commerce_square.production_access_token', $response_body['access_token']);
        $state->set('commerce_square.production_access_token_expiry', strtotime($response_body['expires_at']));
      }
    }
    catch (ApiException $e) {
      $logger->error(t('Error when renewing access token: :s', [':s' => $e->getMessage()]));
    }
    catch (ClientException $e) {
      $logger->error(t('Error when renewing access token: :s', [':s' => $e->getMessage()]));
    }
    catch (\Exception $e) {
      $logger->error(t('Error when renewing access token: :s', [':s' => $e->getMessage()]));
    }
  }
}
